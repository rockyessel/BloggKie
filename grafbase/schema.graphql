type Chat @model @auth(rules: [{ allow: owner, operations: [create, update, delete] }]) {
  content: String!
  author: User! # Relationship with the User who wrote the chat message
}

type Post @model @search @auth(rules: [{ allow: public, operations: [read] } { allow: owner, operations: [create, update, delete] }])  {
  title: String!
  caption:String
  slug: String! @unique
  content: String!
  publishedAt: DateTime!
  comments: [Comment]
  likes: Int @default(value: 0)
  views: Int @default(value: 0)
  tags: [String] @length(max: 5)
  author: User! @relation(name: "UserPosts")
  audio: String
  chats: [Chat]
  # Non-User('Public') - User('Private')
  status: String @default(value: "public")
  includedUsers: [User] @relation(name: "PostIncludedUsers")
}

type Comment @model @search {
  post: Post!
  body: String!
  likes: Int @default(value: 0)
  author: User
}

type User @model @search {
  email: Email! @unique
  password: String
  picture:String
  name: String
  username: String
  posts: [Post]
  comments: [Comment]
}


schema @auth(
    providers: [{ type: jwt, issuer: "nextauth", secret: "{{ env.NEXTAUTH_SECRET }}" }]
    rules: [{ allow: private }])
    {
  query: Query
}
